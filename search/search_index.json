{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Concept","text":"<p>There are three popular repositories of Philippine Supreme Court decisions. Reference to such decisions are (traditionally) based on the name of the repository.</p> <p>Two of which - <code>Phil.</code> and <code>SCRA</code> - are talked about in the case of China Airlines v. Chiok, G.R. No. 152122, July 30, 2003:</p> <p>x x x This Court hereby exhorts members of the bar and the bench to refer to and quote from the official repository of our decisions, the Philippine Reports, whenever practicable [footnote: In the present case, Philippine Reports are cited whenever possible.]. In the absence of this primary source, which is still being updated, they may resort to unofficial sources like the SCRA [footnote: Supreme Court Reports Annotated]. We remind them that the Court\u2019s ponencia, when used to support a judgment or ruling, should be quoted accurately. (emphasis and footnotes supplied)</p>"},{"location":"#repositories","title":"Repositories","text":"Style Nature Publisher Description Basis <code>Phil.</code> Public Philippine Reports Though \"official\", often delayed in publication The [Supreme Court] Reporter shall prepare and publish with each reported decision a concise synopsis of the facts necessary to a clear understanding of the case x x x <code>Offg.</code> Public Official Gazette Though \"official\", decisions are only published here occasionally There shall be published in the Official Gazette all x x x decisions or abstracts of decisions of the Supreme Court and the Court of Appeals, or other courts of similar rank, as may be deemed by the said courts of sufficient importance to be so published; x x x <code>SCRA</code> Private Supreme Court Reports Annotated An unofficial source but more frequently printed by private entity See disquisition in China Airlines v. Chiok (2003)"},{"location":"#purpose","title":"Purpose","text":"<p>Each of the Report sources have the same format, differing only in the <code>publisher</code> involved.  Its necessary to create a uniform style because of inconsistent styling over the years.</p> Volume Uniform Publisher Page/s Date Sample Citation Volume no. Name / style of the publisher / reporter Page number/s of the volume Optional date 1 Phil. Reports 100 1 <code>Phil.</code> 100 - 100 S.C.R.A. 105, 101-103 (1994) 1 <code>SCRA</code> 105 - 41 Off. Gazette 1001, Jan. 1, 1949 41 <code>Offg.</code> 1001 Jan. 1, 1949 <p>This library takes advantage of regex to detect patterns of citations and outputs a uniform dissection of the same based on the table above.</p>"},{"location":"reference/","title":"Main","text":""},{"location":"reference/#citation_report.__main__.Report","title":"<code>Report</code>  <code>dataclass</code>","text":"<p>Based on a <code>Match</code> object with pre-defined regex group names, extract groups into respective fields.</p> Source code in <code>citation_report/__main__.py</code> Python<pre><code>@dataclass\nclass Report:\n\"\"\"Based on a `Match` object with pre-defined regex group names,\n    extract groups into respective fields.\n    \"\"\"\nmatch: Match\npublisher: str | None = None\nvolpubpage: str | None = None\nvolume: str | None = None\npage: str | None = None\nreport_date: datetime.date | None = None\ndef __post_init__(self):\nself.publisher = Publisher.get_label(self.match)\nself.volpubpage = self.match.group(\"volpubpage\")\nself.volume = self.match.group(\"volume\")\nself.page = self.match.group(\"page\")\nself.report_date = self.convert_date_from_match(self.match)\ndef __str__(self) -&gt; str:\nreturn self.formal_report\n@property\ndef formal_report(self):\nreturn f\"{self.volume} {self.publisher} {self.page}\"\n@property\ndef phil(self):\nif self.publisher == Publisher.PHIL.value.label:\nreturn self.formal_report\nreturn None\n@property\ndef scra(self):\nif self.publisher == Publisher.SCRA.value.label:\nreturn self.formal_report\nreturn None\n@property\ndef offg(self):\nif self.publisher == Publisher.OFFG.value.label:\nreturn self.formal_report\nreturn None\ndef convert_date_from_match(self, match: Match) -&gt; datetime.date | None:\nif text := match.group(\"report_date\"):\ntry:\nreturn parse(text).date()\nexcept Exception:\n...\nreturn None\n@classmethod\ndef extract(cls, text: str) -&gt; Iterator[Self]:\n\"\"\"Given sample legalese `text`, extract all Supreme Court `Report` patterns.\n        Examples:\n            &gt;&gt;&gt; sample = \"250 Phil. 271, 271-272, Jan. 1, 2019\"\n            &gt;&gt;&gt; report = next(Report.extract(sample))\n            &gt;&gt;&gt; type(report)\n            citation_report.__main__.Report\n            &gt;&gt;&gt; report.volpubpage\n            '250 Phil. 271'\n        Args:\n            text (str): Text containing report citations.\n        Yields:\n            Iterator[Self]: Iterator of `Report` instances\n        \"\"\"\nfor match in REPORT_PATTERN.finditer(text):\nyield Report(match)\n@classmethod\ndef extract_from_dict(cls, data: dict, report_type: str):\n\"\"\"Assuming a dictionary with any of the following report_type keys\n        `scra`, `phil` or `offg`, get the value of the Report property.\n        Examples:\n            &gt;&gt;&gt; sample_data = {\"scra\": \"14 SCRA 314\"} # dict\n            &gt;&gt;&gt; Report.extract_from_dict(sample_data, \"scra\")\n            '14 SCRA 314'\n        Args:\n            data (dict): A `dict` containing a possible report `{key: value}`\n            report_type (str): Must be either \"scra\", \"phil\", or \"offg\"\n        Returns:\n            _type_: _description_\n        \"\"\"\nif report_type.lower() in [\"scra\", \"phil\", \"offg\"]:\nif candidate := data.get(report_type):\ntry:\nobj = next(cls.extract(candidate))\n# will get the @property of the Report with the same name\nif hasattr(obj, report_type):\nreturn obj.__getattribute__(report_type)\nexcept StopIteration:\nreturn None\nreturn None\n@classmethod\ndef get_unique(cls, text: str) -&gt; list[str]:\n\"\"\"Will only get `Report` volpubpages (string) from the text\"\"\"\nreports = [r.volpubpage for r in cls.extract(text) if r.volpubpage]\nreturn list(set(reports))\n</code></pre>"},{"location":"reference/#citation_report.__main__.Report.extract","title":"<code>extract(text)</code>  <code>classmethod</code>","text":"<p>Given sample legalese <code>text</code>, extract all Supreme Court <code>Report</code> patterns.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; sample = \"250 Phil. 271, 271-272, Jan. 1, 2019\"\n&gt;&gt;&gt; report = next(Report.extract(sample))\n&gt;&gt;&gt; type(report)\ncitation_report.__main__.Report\n&gt;&gt;&gt; report.volpubpage\n'250 Phil. 271'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text containing report citations.</p> required <p>Yields:</p> Type Description <code>Iterator[Self]</code> <p>Iterator[Self]: Iterator of <code>Report</code> instances</p> Source code in <code>citation_report/__main__.py</code> Python<pre><code>@classmethod\ndef extract(cls, text: str) -&gt; Iterator[Self]:\n\"\"\"Given sample legalese `text`, extract all Supreme Court `Report` patterns.\n    Examples:\n        &gt;&gt;&gt; sample = \"250 Phil. 271, 271-272, Jan. 1, 2019\"\n        &gt;&gt;&gt; report = next(Report.extract(sample))\n        &gt;&gt;&gt; type(report)\n        citation_report.__main__.Report\n        &gt;&gt;&gt; report.volpubpage\n        '250 Phil. 271'\n    Args:\n        text (str): Text containing report citations.\n    Yields:\n        Iterator[Self]: Iterator of `Report` instances\n    \"\"\"\nfor match in REPORT_PATTERN.finditer(text):\nyield Report(match)\n</code></pre>"},{"location":"reference/#citation_report.__main__.Report.extract_from_dict","title":"<code>extract_from_dict(data, report_type)</code>  <code>classmethod</code>","text":"<p>Assuming a dictionary with any of the following report_type keys <code>scra</code>, <code>phil</code> or <code>offg</code>, get the value of the Report property.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; sample_data = {\"scra\": \"14 SCRA 314\"} # dict\n&gt;&gt;&gt; Report.extract_from_dict(sample_data, \"scra\")\n'14 SCRA 314'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>A <code>dict</code> containing a possible report <code>{key: value}</code></p> required <code>report_type</code> <code>str</code> <p>Must be either \"scra\", \"phil\", or \"offg\"</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>citation_report/__main__.py</code> Python<pre><code>@classmethod\ndef extract_from_dict(cls, data: dict, report_type: str):\n\"\"\"Assuming a dictionary with any of the following report_type keys\n    `scra`, `phil` or `offg`, get the value of the Report property.\n    Examples:\n        &gt;&gt;&gt; sample_data = {\"scra\": \"14 SCRA 314\"} # dict\n        &gt;&gt;&gt; Report.extract_from_dict(sample_data, \"scra\")\n        '14 SCRA 314'\n    Args:\n        data (dict): A `dict` containing a possible report `{key: value}`\n        report_type (str): Must be either \"scra\", \"phil\", or \"offg\"\n    Returns:\n        _type_: _description_\n    \"\"\"\nif report_type.lower() in [\"scra\", \"phil\", \"offg\"]:\nif candidate := data.get(report_type):\ntry:\nobj = next(cls.extract(candidate))\n# will get the @property of the Report with the same name\nif hasattr(obj, report_type):\nreturn obj.__getattribute__(report_type)\nexcept StopIteration:\nreturn None\nreturn None\n</code></pre>"},{"location":"reference/#citation_report.__main__.Report.get_unique","title":"<code>get_unique(text)</code>  <code>classmethod</code>","text":"<p>Will only get <code>Report</code> volpubpages (string) from the text</p> Source code in <code>citation_report/__main__.py</code> Python<pre><code>@classmethod\ndef get_unique(cls, text: str) -&gt; list[str]:\n\"\"\"Will only get `Report` volpubpages (string) from the text\"\"\"\nreports = [r.volpubpage for r in cls.extract(text) if r.volpubpage]\nreturn list(set(reports))\n</code></pre>"},{"location":"subreference/","title":"Publisher","text":""},{"location":"subreference/#citation_report.publisher.Publisher","title":"<code>Publisher</code>","text":"<p>         Bases: <code>Enum</code></p> <p>There are three popular sources of Supreme Court decisions.</p> Source code in <code>citation_report/publisher.py</code> Python<pre><code>class Publisher(Enum):\n\"\"\"There are three popular sources of Supreme Court decisions.\"\"\"\nPHIL = PublisherStyle(\nlabel=\"Phil.\",\ndescription=\"Philippine Reports\",\ngroup_name=\"PHIL_PUB\",\nregex_exp=phil_regex,\n)\nSCRA = PublisherStyle(\nlabel=\"SCRA\",\ndescription=\"Supreme Court Reports Annotated\",\ngroup_name=\"SCRA_PUB\",\nregex_exp=scra_regex,\n)\nOFFG = PublisherStyle(\nlabel=\"O.G.\",\ndescription=\"Official Gazette\",\ngroup_name=\"OG_PUB\",\nregex_exp=offg_regex,\n)\n@property\ndef pattern(self) -&gt; Pattern:\nreturn re.compile(self.value.regex_exp, re.I | re.X)\n@classmethod\ndef regex_options(cls) -&gt; str:\n\"\"\"A partial regex string containing the options available.\"\"\"\nreturn rf\"\"\"\n            (?P&lt;publisher&gt;\n{cls.SCRA.value.regex_exp}| # contains SCRA_PUB group name\n{cls.PHIL.value.regex_exp}| # contains PHIL_PUB group name\n{cls.OFFG.value.regex_exp} # contains OG_PUB group name\n            )\n        \"\"\"\n@classmethod\ndef all_patterns(cls) -&gt; Pattern:\nreturn re.compile(cls.regex_options(), re.X | re.I)\n@classmethod\ndef get_label(cls, match: Match):\nfor _, m in cls.__members__.items():\nif match.group(m.value.group_name):\nreturn m.value.label\n</code></pre>"},{"location":"subreference/#citation_report.publisher.Publisher.regex_options","title":"<code>regex_options()</code>  <code>classmethod</code>","text":"<p>A partial regex string containing the options available.</p> Source code in <code>citation_report/publisher.py</code> Python<pre><code>@classmethod\ndef regex_options(cls) -&gt; str:\n\"\"\"A partial regex string containing the options available.\"\"\"\nreturn rf\"\"\"\n        (?P&lt;publisher&gt;\n{cls.SCRA.value.regex_exp}| # contains SCRA_PUB group name\n{cls.PHIL.value.regex_exp}| # contains PHIL_PUB group name\n{cls.OFFG.value.regex_exp} # contains OG_PUB group name\n        )\n    \"\"\"\n</code></pre>"},{"location":"usage/","title":"Pattern Matching Examples","text":""},{"location":"usage/#import","title":"Import","text":"Python<pre><code>&gt;&gt;&gt; from citation_report import report # note this includes \"report_date\" variants\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile(report, re.I|re.X) # note flags\n</code></pre>"},{"location":"usage/#general-usage","title":"General Usage","text":"Python<pre><code>&gt;&gt;&gt; text = \"42 SCRA 109, 117-118, October 29, 1971;\"\n&gt;&gt;&gt; match = pattern.search(text)\n&gt;&gt;&gt; match.group(\"volpubpage\")\n'42 SCRA 109'\n&gt;&gt;&gt; match.group(\"volume\")\n'42 SCRA 109'\n&gt;&gt;&gt; match.group(\"publisher\")\n'SCRA'\n&gt;&gt;&gt; match.group(\"page\")\n'109'\n&gt;&gt;&gt; match.group(\"report_date\")\n'October 29, 1971'\n</code></pre>"},{"location":"usage/#typographic-error-patterns","title":"Typographic Error Patterns","text":"Python<pre><code>&gt;&gt;&gt; text = \"1aPhil3\" # this would require a separate casetransform function\n&gt;&gt;&gt; modified_text = \"1a Phil 3\"\n&gt;&gt;&gt; match = pattern.search(text)\n&gt;&gt;&gt; match.group(\"volume\")\n'1a'\n&gt;&gt;&gt; match.group(\"publisher\")\n'Phil.'\n&gt;&gt;&gt; match.group(\"page\")\n'3'\n</code></pre>"}]}